// Generated by gencpp from file position_optimization/check_odom.msg
// DO NOT EDIT!


#ifndef POSITION_OPTIMIZATION_MESSAGE_CHECK_ODOM_H
#define POSITION_OPTIMIZATION_MESSAGE_CHECK_ODOM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace position_optimization
{
template <class ContainerAllocator>
struct check_odom_
{
  typedef check_odom_<ContainerAllocator> Type;

  check_odom_()
    : check(false)
    , x(0.0)
    , y(0.0)
    , xx(0.0)
    , yy(0.0)
    , yaw(0.0)  {
    }
  check_odom_(const ContainerAllocator& _alloc)
    : check(false)
    , x(0.0)
    , y(0.0)
    , xx(0.0)
    , yy(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _check_type;
  _check_type check;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _xx_type;
  _xx_type xx;

   typedef float _yy_type;
  _yy_type yy;

   typedef float _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::position_optimization::check_odom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::position_optimization::check_odom_<ContainerAllocator> const> ConstPtr;

}; // struct check_odom_

typedef ::position_optimization::check_odom_<std::allocator<void> > check_odom;

typedef boost::shared_ptr< ::position_optimization::check_odom > check_odomPtr;
typedef boost::shared_ptr< ::position_optimization::check_odom const> check_odomConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::position_optimization::check_odom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::position_optimization::check_odom_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::position_optimization::check_odom_<ContainerAllocator1> & lhs, const ::position_optimization::check_odom_<ContainerAllocator2> & rhs)
{
  return lhs.check == rhs.check &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.xx == rhs.xx &&
    lhs.yy == rhs.yy &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::position_optimization::check_odom_<ContainerAllocator1> & lhs, const ::position_optimization::check_odom_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace position_optimization

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::position_optimization::check_odom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::position_optimization::check_odom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::position_optimization::check_odom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::position_optimization::check_odom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::position_optimization::check_odom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::position_optimization::check_odom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::position_optimization::check_odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1f732d21ca4d6b85788382129d5983b";
  }

  static const char* value(const ::position_optimization::check_odom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1f732d21ca4d6b8ULL;
  static const uint64_t static_value2 = 0x5788382129d5983bULL;
};

template<class ContainerAllocator>
struct DataType< ::position_optimization::check_odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "position_optimization/check_odom";
  }

  static const char* value(const ::position_optimization::check_odom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::position_optimization::check_odom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool check\n"
"float32 x\n"
"float32 y\n"
"float32 xx\n"
"float32 yy\n"
"float32 yaw\n"
;
  }

  static const char* value(const ::position_optimization::check_odom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::position_optimization::check_odom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.check);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.xx);
      stream.next(m.yy);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct check_odom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::position_optimization::check_odom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::position_optimization::check_odom_<ContainerAllocator>& v)
  {
    s << indent << "check: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.check);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "xx: ";
    Printer<float>::stream(s, indent + "  ", v.xx);
    s << indent << "yy: ";
    Printer<float>::stream(s, indent + "  ", v.yy);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSITION_OPTIMIZATION_MESSAGE_CHECK_ODOM_H
